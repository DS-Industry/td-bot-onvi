import bot from "./methods/connection";
import TgMethod from "./methods/tgMethod";
import ClientMethod from "./client/clientMethod";

import connection from "./db";
require('dotenv').config();

const tgMethod = new TgMethod();
const clientMethod = new ClientMethod();
const usersWithMenu = [Number(process.env.ADMIN)];


connection.run('CREATE TABLE IF NOT EXISTS CLIENT (ID SERIAL PRIMARY KEY, TG_TOPIC_ID TEXT, TG_CLIENT_ID TEXT)');

bot.on("polling_error", err => console.log(err.data.error.message));
const commands = [
    {
        command: "start",
        description: "–ó–∞–ø—É—Å—Ç–∏—Ç—å —á–∞—Ç"
    },
    {

        command: "help",
        description: "–ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è —á–∞—Ç–æ–º?"

    },
]

bot.setMyCommands(commands);

bot.on('message', async msg => {
    try {
        const chatId = msg.chat.id;
        let text = msg.text;
        const adminChat = usersWithMenu[0];
        const client = await clientMethod.searchClientByTgId(chatId);

        console.log(client)

        if(client) {
            if (text === '/start') {
                await tgMethod.sendMessageWithRetry(chatId, `–ü—Ä–∏–≤–µ—Ç! üëã \n–Ø –±–æ—Ç —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–∏ ONVI. –í—Å–µ, —á—Ç–æ –≤—ã –Ω–∞–ø–∏—à–∏—Ç–µ, –±—É–¥–µ—Ç –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–∞—à–∏–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º –∏ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∞ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è. –ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å? üòä`);
            } else if (text === '/help') {
                await tgMethod.sendMessageWithRetry(chatId, '–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –æ–ø–∏—à–∏—Ç–µ –ø—Ä–æ–±–ª–µ–º—É —Å –∫–æ—Ç–æ—Ä–æ–π —Å—Ç–æ–ª–∫–Ω—É–ª–∏—Å—å. –ù–∞—à–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã —Ä–∞—Å—Å–º–æ—Ç—Ä—è—Ç –≤–∞—à –∑–∞–ø—Ä–æ—Å –∏ –æ—Ç–≤–µ—Ç—è—Ç –≤–∞–º –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—èüí™');

            } else if (msg.photo && msg.photo.length > 0) {
                if (msg.caption !== undefined) {
                    text = msg.caption;
                } else {
                    text = '–î–æ–±–∞–≤–ª–µ–Ω–æ —Ç–æ–ª—å–∫–æ —Ñ–æ—Ç–æ.';
                }
                await tgMethod.sendMediaTopic(adminChat, client.TG_TOPIC_ID, msg.photo[msg.photo.length - 1].file_id, 'photo', text)

            } else if (msg.document) {
                if (msg.caption !== undefined) {
                    text = msg.caption;
                } else {
                    text = '–î–æ–±–∞–≤–ª–µ–Ω —Ç–æ–ª—å–∫–æ –¥–æ–∫—É–º–µ–Ω—Ç.';
                }
                await tgMethod.sendMediaTopic(adminChat, client.TG_TOPIC_ID, msg.document.file_id, 'doc', text)

            } else if (msg.video) {
                if (msg.caption !== undefined) {
                    text = msg.caption;
                } else {
                    text = '–î–æ–±–∞–≤–ª–µ–Ω–æ —Ç–æ–ª—å–∫–æ –≤–∏–¥–µ–æ.';
                }
                await tgMethod.sendMediaTopic(adminChat, client.TG_TOPIC_ID, msg.video.file_id, 'video', text)

            } else if (msg.sticker) {
                await tgMethod.sendMediaTopic(adminChat, client.TG_TOPIC_ID, msg.sticker.file_id, 'sticker')

            } else if (msg.video_note || msg.voice) {
                await tgMethod.sendMessageWithRetry(chatId, '–Ø —Ç–∞–∫ –Ω–µ –ø–æ–Ω–∏–º–∞—é');

            } else {

                await tgMethod.sendMessageTopicWithRetry(adminChat, text, client.TG_TOPIC_ID);
            }




        } else if(adminChat === chatId) {
            const clientByTopic = await clientMethod.searchClientByTopicId(msg.message_thread_id);

            if (msg.photo && msg.photo.length > 0) {
                if (msg.caption !== undefined) {
                    text = msg.caption;
                } else {
                    text = '–î–æ–±–∞–≤–ª–µ–Ω–æ —Ç–æ–ª—å–∫–æ —Ñ–æ—Ç–æ.';
                }
                await tgMethod.sendMedia(clientByTopic.TG_CLIENT_ID, msg.photo[msg.photo.length - 1].file_id, 'photo', text)

            } else if (msg.document) {
                if (msg.caption !== undefined) {
                    text = msg.caption;
                } else {
                    text = '–î–æ–±–∞–≤–ª–µ–Ω —Ç–æ–ª—å–∫–æ –¥–æ–∫—É–º–µ–Ω—Ç.';
                }
                await tgMethod.sendMedia(clientByTopic.TG_CLIENT_ID, msg.document.file_id, 'doc', text)

            } else if (msg.video) {
                if (msg.caption !== undefined) {
                    text = msg.caption;
                } else {
                    text = '–î–æ–±–∞–≤–ª–µ–Ω–æ —Ç–æ–ª—å–∫–æ –≤–∏–¥–µ–æ.';
                }
                await tgMethod.sendMedia(clientByTopic.TG_CLIENT_ID, msg.video.file_id, 'video', text)

            } else if (msg.sticker) {
                await tgMethod.sendMedia(clientByTopic.TG_CLIENT_ID, msg.sticker.file_id, 'sticker')

            } else if (msg.video_note || msg.voice) {
                await tgMethod.sendMessageTopicWithRetry(adminChat, '–Ø —Ç–∞–∫ –Ω–µ –ø–æ–Ω–∏–º–∞—é', msg.message_thread_id);

            } else {

                await tgMethod.sendMessageWithRetry(clientByTopic.TG_CLIENT_ID, text);
            }



        } else {
            const topicId = await tgMethod.createTopic(msg.from.first_name);
            await clientMethod.addClient(topicId, chatId);
        }
    } catch(error) {
        console.log(error);
    }
})